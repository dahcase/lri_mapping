cov_agg[[i]] <- data_frame(year = year, mbg = est, country = country)
}
cov_list_agg[[j]] <- do.call(rbind, cov_agg)
names(cov_list_agg)[j] <- names(cov_list)[j]
}
stackers_list <- cov_list_agg
# Plot
for (i in 1:5) {
stackers_list[[i]] <- rename(stackers_list[[i]], GAUL = country)
stackers_list[[i]] <- left_join(stackers_list[[i]], iso_gaul, by = 'GAUL')
}
pdf('peru_run1.pdf')
for (i in iso_list) {
id_reg2 <- filter(id_reg, country == i)
cntry_dat_reg2 <- filter(cntry_dat_reg, iso3 == i)
stackers_list2 <- stackers_list
for (j in 1:5) {
stackers_list2[[j]] <- filter(stackers_list2[[j]], ISO3 == i)
}
mbg_agg_plot2 <- filter(mbg_agg_plot, ISO3 == i)
print(
ggplot() +
#input data
geom_point(data = id_reg2, aes(x = year, y = MBG_raw, size = MBG_raw_dat), col = 'blue') +
# country estimates
geom_point(data = cntry_dat_reg2, aes(x = year_start, y = cntry_est, col = 'cntry_est'),
shape = 17, size = 3) +
# mbg preds
geom_line(data = mbg_agg_plot2, aes(x = year, y = mbg, col = 'mbg'), show.legend = T) +
# all stackers
geom_line(data = stackers_list2[[1]], aes(x = year, y = mbg, col = 'stacking'), show.legend = T) +
# gam
geom_line(data = stackers_list2[[2]], aes(x = year, y = mbg, col = 'gam'), show.legend = T) +
# brt
geom_line(data = stackers_list2[[3]], aes(x = year, y = mbg, col = 'brt'), show.legend = T) +
# lasso
geom_line(data = stackers_list2[[4]], aes(x = year, y = mbg, col = 'lasso'), show.legend = T) +
# ridge
geom_line(data = stackers_list2[[5]], aes(x = year, y = mbg, col = 'ridge'), show.legend = T) +
# making it clean
ylab('Prevalence') + xlab('Year') +
ggtitle(paste0('Piped Water Prevalence, ',i)) +
theme_bw()
)
}
dev.off()
ad0_reg$ADM0_CODE
# Aggregate mbg results
mbg_agg <- list()
for (i in 1:16) {
message(i)
num1 <- mbg_results[[i]]*pop_list[[i]]
num2 <- extract(num1, ad0_reg, fun = sum, df = T, na.rm = T)[,2]
if (i == 1) {
mod <- zonal_pop[[1]]
}
if (i > 1 & i < 7) {
mod <- zonal_pop[[2]]
}
if (i > 6 & i < 12) {
mod <- zonal_pop[[3]]
}
if (i > 11) {
mod <- zonal_pop[[4]]
}
est <- (num2)/mod
country <- 195
year <- rep(2000 + (i-1), length(ad0_reg$ADM0_CODE))
mbg_agg[[i]] <- data_frame(year = year, mbg = est, country = country)
}
ad0_reg
year <- rep(2000 + (i-1), length(195))
year
# Aggregate mbg results
mbg_agg <- list()
for (i in 1:16) {
message(i)
num1 <- mbg_results[[i]]*pop_list[[i]]
num2 <- extract(num1, ad0_reg, fun = sum, df = T, na.rm = T)[,2]
if (i == 1) {
mod <- zonal_pop[[1]]
}
if (i > 1 & i < 7) {
mod <- zonal_pop[[2]]
}
if (i > 6 & i < 12) {
mod <- zonal_pop[[3]]
}
if (i > 11) {
mod <- zonal_pop[[4]]
}
est <- (num2)/mod
country <- 195
year <- rep(2000 + (i-1), length(195))
mbg_agg[[i]] <- data_frame(year = year, mbg = est, country = country)
}
mbg_agg_plot <- do.call(rbind, mbg_agg)
mbg_agg_plot <- rename(mbg_agg_plot, GAUL = country)
mbg_agg_plot <- left_join(mbg_agg_plot, iso_gaul, by = 'GAUL')
# Aggregate covariates
cov_list_agg <- list()
for (j in 1:5) {
cov <- cov_list[[j]]
cov_agg <- list()
for (i in 1:dim(cov)[3]) {
message(paste('layer', i, 'out of' ,dim(cov)[3], ';',
j,'covariate out of',length(cov_list)))
num1 <- cov[[i]]*pop_list[[i]]
num2 <- extract(num1, ad0_reg, fun = sum, df = T, na.rm = T)[,2]
if (i == 1) {
mod <- zonal_pop[[1]]
}
if (i > 1 & i < 7) {
mod <- zonal_pop[[2]]
}
if (i > 6 & i < 12) {
mod <- zonal_pop[[3]]
}
if (i > 11) {
mod <- zonal_pop[[4]]
}
est <- (num2)/mod
country <- ad0_reg$ADM0_CODE
year <- rep(2000 + (i-1), length(ad0_reg$ADM0_CODE))
cov_agg[[i]] <- data_frame(year = year, mbg = est, country = country)
}
cov_list_agg[[j]] <- do.call(rbind, cov_agg)
names(cov_list_agg)[j] <- names(cov_list)[j]
}
# Aggregate covariates
cov_list_agg <- list()
for (j in 1:5) {
cov <- cov_list[[j]]
cov_agg <- list()
for (i in 1:dim(cov)[3]) {
message(paste('layer', i, 'out of' ,dim(cov)[3], ';',
j,'covariate out of',length(cov_list)))
num1 <- cov[[i]]*pop_list[[i]]
num2 <- extract(num1, ad0_reg, fun = sum, df = T, na.rm = T)[,2]
if (i == 1) {
mod <- zonal_pop[[1]]
}
if (i > 1 & i < 7) {
mod <- zonal_pop[[2]]
}
if (i > 6 & i < 12) {
mod <- zonal_pop[[3]]
}
if (i > 11) {
mod <- zonal_pop[[4]]
}
est <- (num2)/mod
country <- 195
year <- rep(2000 + (i-1), length(195))
cov_agg[[i]] <- data_frame(year = year, mbg = est, country = country)
}
cov_list_agg[[j]] <- do.call(rbind, cov_agg)
names(cov_list_agg)[j] <- names(cov_list)[j]
}
stackers_list <- cov_list_agg
# Plot
for (i in 1:5) {
stackers_list[[i]] <- rename(stackers_list[[i]], GAUL = country)
stackers_list[[i]] <- left_join(stackers_list[[i]], iso_gaul, by = 'GAUL')
}
dev.off()
pdf('peru_run1.pdf')
for (i in iso_list) {
id_reg2 <- filter(id_reg, country == i)
cntry_dat_reg2 <- filter(cntry_dat_reg, iso3 == i)
stackers_list2 <- stackers_list
for (j in 1:5) {
stackers_list2[[j]] <- filter(stackers_list2[[j]], ISO3 == i)
}
mbg_agg_plot2 <- filter(mbg_agg_plot, ISO3 == i)
print(
ggplot() +
#input data
geom_point(data = id_reg2, aes(x = year, y = MBG_raw, size = MBG_raw_dat), col = 'blue') +
# country estimates
geom_point(data = cntry_dat_reg2, aes(x = year_start, y = cntry_est, col = 'cntry_est'),
shape = 17, size = 3) +
# mbg preds
geom_line(data = mbg_agg_plot2, aes(x = year, y = mbg, col = 'mbg'), show.legend = T) +
# all stackers
geom_line(data = stackers_list2[[1]], aes(x = year, y = mbg, col = 'stacking'), show.legend = T) +
# gam
geom_line(data = stackers_list2[[2]], aes(x = year, y = mbg, col = 'gam'), show.legend = T) +
# brt
geom_line(data = stackers_list2[[3]], aes(x = year, y = mbg, col = 'brt'), show.legend = T) +
# lasso
geom_line(data = stackers_list2[[4]], aes(x = year, y = mbg, col = 'lasso'), show.legend = T) +
# ridge
geom_line(data = stackers_list2[[5]], aes(x = year, y = mbg, col = 'ridge'), show.legend = T) +
# making it clean
ylab('Prevalence') + xlab('Year') +
ggtitle(paste0('Piped Water Prevalence, ',i)) +
theme_bw()
)
}
dev.off()
cntry_dat_reg2
cntry_dat
# Read in country level estimates
poly_cntry <- read_csv('J:/WORK/11_geospatial/wash/data/agg/water_poly_agg_cntry_2017-07-12.csv')
pt_cntry <- read_csv('J:/WORK/11_geospatial/wash/data/agg/water_pt_agg_cntry_2017-07-12.csv')
cntry_dat <- rbind(poly_cntry, pt_cntry)
cntry_dat[which(cntry_dat$iso3 %in% c('KEN_44798', 'KEN_35619',
'KEN_35659', 'KEN_35672')),] <- 'KEN'
cntry_dat[which(cntry_dat$iso3 %in% c('IDN_4741', 'IDN_4742')),] <- 'IDN'
cntry_dat_reg <- filter(cntry_dat, iso3 %in% iso_list)
cntry_dat_reg <- rename(cntry_dat_reg, cntry_est = piped)
cntry_dat_reg$cntry_est <- as.numeric(cntry_dat_reg$cntry_est)
cntry_dat_reg$year_start <- as.numeric(cntry_dat_reg$year_start)
pdf('peru_run1.pdf')
for (i in iso_list) {
id_reg2 <- filter(id_reg, country == i)
cntry_dat_reg2 <- filter(cntry_dat_reg, iso3 == i)
stackers_list2 <- stackers_list
for (j in 1:5) {
stackers_list2[[j]] <- filter(stackers_list2[[j]], ISO3 == i)
}
mbg_agg_plot2 <- filter(mbg_agg_plot, ISO3 == i)
print(
ggplot() +
#input data
geom_point(data = id_reg2, aes(x = year, y = MBG_raw, size = MBG_raw_dat), col = 'blue') +
# country estimates
geom_point(data = cntry_dat_reg2, aes(x = year_start, y = cntry_est, col = 'cntry_est'),
shape = 17, size = 3) +
# mbg preds
geom_line(data = mbg_agg_plot2, aes(x = year, y = mbg, col = 'mbg'), show.legend = T) +
# all stackers
geom_line(data = stackers_list2[[1]], aes(x = year, y = mbg, col = 'stacking'), show.legend = T) +
# gam
geom_line(data = stackers_list2[[2]], aes(x = year, y = mbg, col = 'gam'), show.legend = T) +
# brt
geom_line(data = stackers_list2[[3]], aes(x = year, y = mbg, col = 'brt'), show.legend = T) +
# lasso
geom_line(data = stackers_list2[[4]], aes(x = year, y = mbg, col = 'lasso'), show.legend = T) +
# ridge
geom_line(data = stackers_list2[[5]], aes(x = year, y = mbg, col = 'ridge'), show.legend = T) +
# making it clean
ylab('Prevalence') + xlab('Year') +
ggtitle(paste0('Piped Water Prevalence, ',i)) +
theme_bw()
)
}
dev.off()
pdf('peru_run1_no_input.pdf')
for (i in iso_list) {
id_reg2 <- filter(id_reg, country == i)
cntry_dat_reg2 <- filter(cntry_dat_reg, iso3 == i)
stackers_list2 <- stackers_list
for (j in 1:5) {
stackers_list2[[j]] <- filter(stackers_list2[[j]], ISO3 == i)
}
mbg_agg_plot2 <- filter(mbg_agg_plot, ISO3 == i)
print(
ggplot() +
#input data
# geom_point(data = id_reg2, aes(x = year, y = MBG_raw, size = MBG_raw_dat), col = 'blue') +
# country estimates
geom_point(data = cntry_dat_reg2, aes(x = year_start, y = cntry_est, col = 'cntry_est'),
shape = 17, size = 3) +
# mbg preds
geom_line(data = mbg_agg_plot2, aes(x = year, y = mbg, col = 'mbg'), show.legend = T) +
# all stackers
geom_line(data = stackers_list2[[1]], aes(x = year, y = mbg, col = 'stacking'), show.legend = T) +
# gam
geom_line(data = stackers_list2[[2]], aes(x = year, y = mbg, col = 'gam'), show.legend = T) +
# brt
geom_line(data = stackers_list2[[3]], aes(x = year, y = mbg, col = 'brt'), show.legend = T) +
# lasso
geom_line(data = stackers_list2[[4]], aes(x = year, y = mbg, col = 'lasso'), show.legend = T) +
# ridge
geom_line(data = stackers_list2[[5]], aes(x = year, y = mbg, col = 'ridge'), show.legend = T) +
# making it clean
ylab('Prevalence') + xlab('Year') +
ggtitle(paste0('Piped Water Prevalence, ',i)) +
theme_bw()
)
}
dev.off()
packages <- c('dplyr', 'readr', 'tidyr', 'ggplot2')
lapply(packages, library)
apply(packages, library)
?apply
lapply(packages, library, character.only = T)
list.of.packages <- c("ggplot2", "Rcpp")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
installed.packages()
packages <- c('dplyr', 'readr', 'tidyr', 'ggplot2')
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = T)
# Set library path
root        <- ifelse(Sys.info()[1]=="Windows", "J:/", "/home/j/")
package_lib <- ifelse(grepl("geos", Sys.info()[4]),
paste0(root,'temp/geospatial/geos_packages'),
paste0(root,'temp/geospatial/packages'))
commondir   <- sprintf('/share/geospatial/mbg/common_inputs')
.libPaths(package_lib)
message(paste0('Loading packages from ',package_lib))
.libpath
.libpath()
.libPaths()
if(Sys.info()[1]!="Windows") {root <- "/home/j/"}
root
rm(list = ls())
package_lib <- .libPaths()
#### Data Validation Script ####
#### Aniruddha Deshpande, adesh@uw.edu ####
# Set library path
if(Sys.info()[1]!="Windows") {
root <- "/home/j/"
package_lib <- ifelse(grepl("geos", Sys.info()[4]),
paste0(root,'temp/geospatial/geos_packages'),
paste0(root,'temp/geospatial/packages'))
.libPaths(package_lib)
} else {
package_lib <- .libPaths()
}
message(paste0('Loading packages from ',package_lib))
# Load Packages
packages <- c('dplyr', 'readr', 'tidyr', 'ggplot2')
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = T)
?lapply
lapply(packages, library)
, character.only = T
lapply(packages, library, character.only = T)
if(Sys.info()[1]!="Windows") {
root <- "/home/j/"
package_lib <- ifelse(grepl("geos", Sys.info()[4]),
paste0(root,'temp/geospatial/geos_packages'),
paste0(root,'temp/geospatial/packages'))
.libPaths(package_lib)
} else {
package_lib <- .libPaths()
}
message(paste0('Loading packages from ',package_lib))
packages <- c('dplyr', 'readr', 'tidyr', 'ggplot2')
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = T)
?readr
?read_csv
read_csv('C:/Users/adesh/Documents/pts_10.csv')
?sink
sink(file = 'C:/Users/adesh/Desktop/parsing.txt')
read_csv('C:/Users/adesh/Documents/pts_10.csv')
sink(file = 'C:/Users/adesh/Desktop/parsing.txt')
sink(file = 'C:/Users/adesh/Desktop/parsing.txt', type = 'message', append = T)
sink(file = 'C:/Users/adesh/Desktop/parsing.txt', append = T)
sink(file = 'C:/Users/adesh/Desktop/parsing.txt', type = 'message', append = T)
sink()
sink()
sink(file = 'C:/Users/adesh/Desktop/parsing.txt', append = T)
sink(file = 'C:/Users/adesh/Desktop/parsing.txt', type = 'message', append = T)
read_csv('C:/Users/adesh/Documents/pts_10.csv')
sink()
library(rvest)
url <- "http://www.tripadvisor.com/Hotel_Review-g37209-d1762915-Reviews-JW_Marriott_Indianapolis-Indianapolis_Indiana.html"
reviews <- url %>%
read_html() %>%
html_nodes("#REVIEWS .innerBubble")
id <- reviews %>%
html_node(".quote a") %>%
html_attr("id")
quote <- reviews %>%
html_node(".quote span") %>%
html_text()
rating <- reviews %>%
html_node(".rating .rating_s_fill") %>%
html_attr("alt") %>%
gsub(" of 5 stars", "", .) %>%
as.integer()
date <- reviews %>%
html_node(".rating .ratingDate") %>%
html_attr("title") %>%
strptime("%b %d, %Y") %>%
as.POSIXct()
review <- reviews %>%
html_node(".entry .partial_entry") %>%
html_text()
data.frame(id, quote, rating, date, review, stringsAsFactors = FALSE) %>% View()
reviews
library(raster)
library(tmap)
library(dplyr)
test <- read.csv('J:/WORK/11_geospatial/10_mbg/input_data/w_piped.csv')
mydat <- filter(test, country %in% c('ZAF','NAM','BWA'))
head(mydat)
plot(mydat$latitude, mydat$longitude)
mydat_sp <- SpatialPoints(coords = data.frame(mydat$latitude, mydat$longitude))
plot(mydat_sp)
plot(mydat_sp, col = 'country')
qtm(mydat_sp, col = 'country')
mydat_sp <- SpatialPointsDataFrame(coords = data.frame(mydat$latitude, mydat$longitude),
data = mydat)
qtm(mydat_sp, col = 'country')
?qtm
qtm(mydat_sp, dots.col = 'country')
mydat_sp
mydat_sp$country
test <- read.csv('J:/WORK/11_geospatial/10_mbg/input_data/w_piped.csv', stringsAsFactors = F)
mydat <- filter(test, country %in% c('ZAF','NAM','BWA'))
mydat_sp <- SpatialPointsDataFrame(coords = data.frame(mydat$latitude, mydat$longitude),
data = mydat)
qtm(mydat_sp, dots.col = 'country')
mydat_sp <- SpatialPointsDataFrame(coords = data.frame(mydat$longitude, mydat$latitude),
data = mydat)
qtm(mydat_sp, dots.col = 'country')
data("World")
tm_shape(World[which(World$iso_a3 %in% c('ZAF','NAM','BWA')),])
tm_shape(World[which(World$iso_a3 %in% c('ZAF','NAM','BWA')),]) + tm_polygons()
tm_shape(World[which(World$iso_a3 %in% c('ZAF','NAM','BWA')),]) + tm_polygons() +
tm_shape(mydat_sp) + tm_dots(col = 'country')
tm_shape(World[which(World$iso_a3 %in% c('ZAF','NAM','BWA')),]) + tm_polygons() +
tm_shape(mydat_sp) + tm_dots(col = 'prop', shape = 'country')
count(mydat, country, survey_series)
rm(list = ls())
indi_fam <- "water"
agg_level <- ''
sdg <- F
root <- ifelse(Sys.info()[1]=="Windows", "J:/", "/snfs1/")
repo <- ifelse(Sys.info()[1]=="Windows", 'C:/Users/adesh/Documents/WASH/wash_code/01_collapse/',
'/share/code/geospatial/adesh/wash_mapping/01_collapse/')
if(Sys.info()[1]!="Windows") {
package_lib <- paste0(root,'temp/geospatial/packages')
.libPaths(package_lib)
}
if(!require(pacman)) {
install.packages("pacman"); require(pacman)}
p_load(dplyr, readr)
data_type <- 'poly'
if (!("pt_collapse" %in% ls()) & data_type == 'pt') {
name <- load(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/points_2017_08_16.RData'))
Encoding(pt_collapse$w_source_drink) <- "windows-1252"
Encoding(pt_collapse$w_source_other) <- "windows-1252"
Encoding(pt_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
}
if (!("poly_collapse" %in% ls()) & data_type == 'poly') {
name <- load(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/poly_2017_08_16.Rdata'))
Encoding(poly_collapse$w_source_drink) <- "windows-1252"
Encoding(poly_collapse$w_source_other) <- "windows-1252"
Encoding(poly_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
rm(poly_collapse)
}
if (!("definitions" %in% ls())) {
if (indi_fam == "sani") {
definitions <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/t_type_defined_2017_08_16.csv'),
encoding="windows-1252", stringsAsFactors = F)
} else {
definitions <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/w_source_defined_2017_08_16.csv'),
encoding="windows-1252", stringsAsFactors = F)
definitions2 <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/w_other_defined_2017_08_14.csv'),
encoding="windows-1252", stringsAsFactors = F)
definitions2 <- rename(definitions2, sdg2 = sdg)
}
}
definitions <- distinct(definitions)
if (exists('definitions2')) {definitions2 <- distinct(definitions2)}
rm(list = setdiff(ls(),c('definitions','pt_collapse','definitions2','indi_fam','repo','data_type','root','agg_level', 'sdg')))
setwd(repo)
source('functions/hh_cw.R')
source('functions/address_missing.R')
source('functions/cw_indi.R')
source('functions/agg_wash.R')
source('functions/define_wash.R')
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
problem_list <- filter(ptdat_0, hh_size <= 0)
setwd('C:/Users/adesh/Desktop')
write.csv(problem_list %>% group_by(nid, iso3, survey_series, year_start) %>% summarize(obs = n(), min_hhs = min(hh_size)),
file = paste0(data_type,"_problems.csv"))
setwd(repo)
if (data_type == 'pt') {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, lat, long, survey_series, year_start, sep = "_"))
} else {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, shapefile, location_code, survey_series, year_start, sep = "_"))
}
short_id <- data.frame(cluster_id = unique(ptdat$cluster_id),
id_short = seq(1:length(unique(ptdat$cluster_id))),
stringsAsFactors = F)
ptdat <- left_join(ptdat, short_id, by = 'cluster_id')
rm(short_id)
ptdat <- dplyr::select(ptdat, -cluster_id)
if (data_type == "pt" & agg_level != 'country') {ptdat$hhweight <- 1}
if (data_type == "pt") {ptdat$shapefile <- NA; ptdat$location_code <- NA}
ptdat <- define_indi()
gc()
rm(ptdat_0)
gc()
ptdat <- define_indi()
library(raster)
library(tmap)
library(dplyr)
data("World")
test <- read.csv('J:/WORK/11_geospatial/10_mbg/input_data/w_piped.csv', stringsAsFactors = F)
mydat <- filter(test, country %in% c('COD','COG','GNQ','CAR','AGO','GAB'))
mydat_sp <- SpatialPointsDataFrame(coords = data.frame(mydat$longitude, mydat$latitude),
data = mydat)
tm_shape(World[which(World$iso_a3 %in% c('COD','COG','GNQ','CAR','AGO','GAB')),]) + tm_polygons() +
tm_shape(mydat_sp) + tm_dots(col = 'prop', shape = 'country')
tm_shape(World[which(World$iso_a3 %in% c('COD','COG','GNQ','CAR','AGO','GAB')),]) + tm_polygons() +
tm_shape(mydat_sp) + tm_dots(col = 'prop')
